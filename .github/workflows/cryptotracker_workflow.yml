name: CryptoTracker workflow
on: [push]
jobs:
  # tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r backend/TrackerBackend/requirements.txt
  #         pip install flake8 pep8-naming flake8-broken-line flake8-return
  #     - name: Test with flake8 and django tests
  #       run: |
  #         python -m flake8 backend/TrackerBackend/TrackerBackend/settings.py > flake8_output.txt
  test_models:
    runs-on: ubuntu-latest
    container: postgres:13.0-alpine
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DB_PORT: 5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/TrackerBackend/requirements.txt

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: |
          python manage.py makemigrations
          python manage.py migrate
          pipenv run pytest -v
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DB_PORT: 5432
  # testsz:
  #     name: Deploy project on production server
  #     runs-on: ubuntu-latest
  #     if: github.ref == 'refs/heads/main'
  #     steps:
  #       - name: executing remote ssh commands to deploy
  #         uses: appleboy/ssh-action@master
  #         with:
  #           host: ${{ secrets.HOST }}
  #           username: ${{ secrets.USER }}
  #           key: ${{ secrets.SSH_KEY }}
  #           passphrase: ${{ secrets.PASSPHRASE }} 
  #           script: |
  #             cd foodgram-project-react/infra/
  #             sudo docker system prune --force
  #             sudo docker pull noble6/foodgram
  #             touch .env
  #             echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #             echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #             echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #             echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #             echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #             echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #             sudo docker-compose up -d

          
  # build_and_push_to_docker_hub:
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login to Docker
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Push to Docker Hub
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         context: ./backend/TrackerBackend/
  #         tags: noble6/cryptotracker:latest
          
  # deploy:
  #   name: Deploy project on production server
  #   runs-on: ubuntu-latest
  #   needs: build_and_push_to_docker_hub
  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     - name: executing remote ssh commands to deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }} 
  #         script: |
  #           cd foodgram-project-react/infra/
  #           sudo docker stop $(sudo docker ps -a -q)
  #           sudo docker system prune --force
  #           sudo docker pull noble6/foodgram
  #           touch .env
  #           echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #           echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #           echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #           echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #           sudo docker-compose up -d
            
  # telegram_notification:
  #     runs-on: ubuntu-latest
  #     name: Telegram notification
  #     needs: deploy
  #     steps:
  #       - uses: actions/checkout@master
  #       # - name: send message
  #       #   uses: appleboy/telegram-action@master
  #       #   with:
  #       #     to: ${{ secrets.TELEGRAM_TO }}
  #       #     token: ${{ secrets.TELEGRAM_TOKEN }}
  #       #     args: ${{ github.workflow }} done successfully!
  #       - name: Display flake8 output
  #       run: cat flake8_output.txt
  #         - name: send message
  #           uses: appleboy/telegram-action@master
  #           with:
  #             to: ${{ secrets.TELEGRAM_TO }}
  #             token: ${{ secrets.TELEGRAM_TOKEN }}
  #             args: ${{ github.workflow }} done successfully!
  # telegram_notification:
  #   runs-on: ubuntu-latest
  #   name: Telegram notification
  #   # needs: tests
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: Display flake8 output
  #       run: cat flake8_output.txt
  #     - name: send message
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_TO }}
  #         token: ${{ secrets.TELEGRAM_TOKEN }}
  #         args: ${{ github.workflow }} done successfully!