name: CryptoTracker workflow
on: [push]
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return
          # pip install -r backend/foodgram/requirements.txt
      - name: Test with flake8 and django tests
        run: |
          python -m flake8 backend/TrackerBackend/TrackerBackend/settings.py

          
          
  # build_and_push_to_docker_hub:
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login to Docker
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Push to Docker Hub
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         context: ./backend/TrackerBackend/
  #         tags: noble6/cryptotracker:latest
          
  # deploy:
  #   name: Deploy project on production server
  #   runs-on: ubuntu-latest
  #   needs: build_and_push_to_docker_hub
  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     - name: executing remote ssh commands to deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }} 
  #         script: |
  #           cd foodgram-project-react/infra/
  #           sudo docker stop $(sudo docker ps -a -q)
  #           sudo docker system prune --force
  #           sudo docker pull noble6/foodgram
  #           touch .env
  #           echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #           echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #           echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #           echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #           sudo docker-compose up -d
            
  # telegram_notification:
  #     runs-on: ubuntu-latest
  #     name: Telegram notification
  #     needs: deploy
  #     steps:
  #       - uses: actions/checkout@master
  #       # - name: send message
  #       #   uses: appleboy/telegram-action@master
  #       #   with:
  #       #     to: ${{ secrets.TELEGRAM_TO }}
  #       #     token: ${{ secrets.TELEGRAM_TOKEN }}
  #       #     args: ${{ github.workflow }} done successfully!
  #       - name: Display flake8 output
  #       run: cat flake8_output.txt
  #         - name: send message
  #           uses: appleboy/telegram-action@master
  #           with:
  #             to: ${{ secrets.TELEGRAM_TO }}
  #             token: ${{ secrets.TELEGRAM_TOKEN }}
  #             args: ${{ github.workflow }} done successfully!
  telegram_notification:
    runs-on: ubuntu-latest
    name: Telegram notification
    needs: tests
    steps:
      - uses: actions/checkout@master
      - name: Display flake8 output
        run: cat flake8_output.txt
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          args: ${{ github.workflow }} done successfully!